accessibility: Hidden
responseTimeout: 600
↓Input_variables [steps.InputVariablesStep-1601370188093]: 
↓defineSeparatorSwitchOSAndDownlaodNode [steps.SimpleStep-1603226210951]: 
  expression: |
    'var isWindows = org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS;
    var separator = isWindows ? "\\" :"/";
    var projectPath = com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getOriginalProjectByName(projectName).getDirPath();
    
    // download node 10
    var file = com.twinsoft.convertigo.engine.util.ProcessUtils.getNodeDir("v10.19.0");
    
    // if unix, search into another path (node/bin)
    if(!isWindows && !file.getName().equals("bin")){
    	file = new java.io.File(file, "bin");
    }
    // install npm lib pwa-asset-generator
    var npmInstall = isWindows ?
    					"cmd /C "+file + separator + "npm i -g pwa-asset-generator"  :
    						["bash","-c","PATH=" + file + ":$PATH npm i -g pwa-asset-generator"];
    var npmInstallBis = isWindows ?
    		"cmd /C "+file + separator + "npm i -g @angular/service-worker@5.2.11"  :
    			["bash","-c","PATH=" + file + ":$PATH npm i -g @angular/service-worker@5.2.11"];
    log.debug("defineSeparatorSwitchOSAndDownlaodNode npmInstall = "+ npmInstall);
    log.debug("defineSeparatorSwitchOSAndDownlaodNode npmInstallBis = "+ npmInstallBis);'
↓IfFileExistsThenElse1 [steps.IfFileExistThenElseStep-1603354922838]: 
  comment: search if npm lib ngsw-config is already installed
  condition: file + separator + "ngsw-config"
  ↓jThen [steps.ThenStep-1603354924988]: 
  ↓jElse [steps.ElseStep-1603354924990]: 
    ↓Process_execute1 [steps.ProcessExecStep-1603354805680]: 
      commandLine: npmInstallBis
↓IfFileExistsThenElse [steps.IfFileExistThenElseStep-1603273719750]: 
  comment: search if npm lib pwa-asset-generator is already installed
  condition: file + separator + "pwa-asset-generator"
  ↓jThen [steps.ThenStep-1603273719752]: 
  ↓jElse [steps.ElseStep-1603273719754]: 
    ↓Process_execute1 [steps.ProcessExecStep-1603269268181]: 
      commandLine: npmInstall
      output: true
↓jIf [steps.IfStep-1603208640123]: 
  comment: if a target is defined then create a new index.html and manifest from existing one
  condition: target != ""
  ↓Create_directory [steps.CreateDirectoryStep-1603207036703]: 
    comment: create a dir for the target
    destinationPath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"pwa-assets"
  ↓Duplicate_fileIndexHTML [steps.DuplicateStep-1603204615018]: 
    comment: duplicate index.html named with target name
    copyName: '"index"+target+".html"'
    overwrite: true
    sourcePath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"index.html"
  ↓Move_fileIndexHTML [steps.MoveStep-1603292524784]: 
    comment: move file manifest to our new dir
    destinationPath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target
    overwrite: true
    sourcePath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"index"+target+".html"
  ↓Rename_fileIndexHTML [steps.RenameStep-1603292584762]: 
    comment: rename index-targetName.html to index.html
    newName: '"index.html"'
    overwrite: true
    sourcePath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"index"+target+".html"
  ↓Duplicate_fileManifest [steps.DuplicateStep-1603206186277]: 
    comment: duplicate manifest.json named with target name
    copyName: '"manifest-"+target+".json"'
    overwrite: true
    sourcePath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"assets"+separator+"manifest.json"
  ↓Move_fileManifest [steps.MoveStep-1603207269396]: 
    comment: move file manifest to our new dir
    destinationPath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target
    overwrite: true
    sourcePath: projectPath +separator+ "DisplayObjects"+separator+"mobile"+separator+"assets"+separator+"manifest-"+target+".json"
  ↓Rename_fileManifest [steps.RenameStep-1603292877386]: 
    comment: rename manifest-targetName.json to manifest.json
    newName: '"manifest.json"'
    overwrite: true
    sourcePath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"manifest-"+target+".json"
  ↓Duplicate_fileNGSWWORKER [steps.DuplicateStep-1603294005702]: 
    comment: duplicate ngsw-worker.js named with target name
    copyName: '"ngsw-worker-"+target+".js"'
    overwrite: true
    sourcePath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"ngsw-worker.js"
  ↓Move_fileNGSWWORKER [steps.MoveStep-1603293049574]: 
    comment: move file ngsw-worker to our new dir
    destinationPath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target
    overwrite: true
    sourcePath: projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"ngsw-worker-"+target+".js"
  ↓Rename_fileNGSWWORKER [steps.RenameStep-1603294146873]: 
    comment: rename ngsw-worker-targetName.js to ngsw-worker.js
    newName: '"ngsw-worker.js"'
    overwrite: true
    sourcePath: projectPath + separator +"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"ngsw-worker-"+target+".js"
  ↓Sequence_JSReplaceLinkForManifest [steps.SimpleStep-1603204926368]: 
    comment: change link for our new manifest
    expression: |
      // imports
      var Path = use("java.nio.file.Path");
      var Paths = use("java.nio.file.Paths");
      var Files = use("java.nio.file.Files");
      var StandardCharsets = use("java.nio.charset.StandardCharsets");
      var String = use("java.lang.String");
      // get file path
      var filePath =  Paths.get(projectPath +separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"index.html");
      // get charset utf8
      var charset = StandardCharsets.UTF_8;
      // get text as string
      var content = new String(Files.readAllBytes(filePath), charset);
      // replace new manifest name
      content = content.replaceAll('<link rel="manifest" href="assets/manifest.json">', '<link rel="manifest" href="./manifest.json">');
      Files.write(filePath, content.getBytes(charset));
↓computeCommandLine [steps.SimpleStep-1601370249246]: 
  comment: prepare args for pwa-assets-generator
  expression: |
    'try{
    	jIndex    = projectPath + ((target == undefined || target == "" ) ? separator+"DisplayObjects"+separator+"mobile"+separator+"index"+".html" : separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"index"+".html");
    	jManifest = projectPath + ((target == undefined || target == "" ) ? separator+"DisplayObjects"+separator+"mobile"+separator+"assets"+separator+"manifest.json":separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"manifest.json");
    	jDest     = projectPath + ((target == undefined || target == "") ? separator+"DisplayObjects"+separator+"mobile"+separator+"assets": separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"pwa-assets");
    	jLogo     = image + "";
    	var jCmd = isWindows ? 
    			"cmd /C " +file+separator+"pwa-asset-generator " + jLogo + " -i " + jIndex + " -m " + jManifest + " " + jDest:
    			["bash", "-c", "PATH=" + file + ":$PATH pwa-asset-generator " + jLogo + " -i " + jIndex + " -m " + jManifest + " " + jDest]
    	log.debug("computeCommandLine: " + jCmd);
    }
    catch(e){
    	log.warning("[GenerateAssets]: an error occured while trying to generate assets");
    	log.warning(e);
    }
    
    
    '
↓Process_execute [steps.ProcessExecStep-1601291368434]: 
  commandLine: jCmd
  comment: execute pwa-assets-generator
  executionDirectory: .//assets
  output: true
↓Complex [steps.XMLComplexStep-1603208858186]: 
  nodeName: status
  ↓Complex [steps.XMLComplexStep-1603208980630]: 
    nodeName: pwa-asset-generator
    ↓pwaAssetGenerator2 [steps.XMLElementStep-1603209014151]: 
      nodeName: exit-status
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1601291368434
            - java.lang.String: 
              - ↑value: ./exit/text()
    ↓pwaAssetGenerator [steps.XMLElementStep-1603208913543]: 
      nodeName: output
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1601291368434
            - java.lang.String: 
              - ↑value: ./output/text()
    ↓pwaAssetGenerator1 [steps.XMLElementStep-1603209013252]: 
      nodeName: error
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1601291368434
            - java.lang.String: 
              - ↑value: ./error/text()
↓Sequence_JSOverrideManifest [steps.SimpleStep-1603209442256]: 
  comment: override manifest.json properties such as name etc...
  expression: |
    '// imports
    var Path = use("java.nio.file.Path");
    var Paths = use("java.nio.file.Paths");
    var Files = use("java.nio.file.Files");
    var StandardCharsets = use("java.nio.charset.StandardCharsets");
    var String = use("java.lang.String");
    // get file path
    var filePath =  Paths.get(projectPath + (target == "" ? separator+"DisplayObjects"+separator+"mobile"+separator+"assets"+separator+"manifest.json" : separator+"DisplayObjects"+separator+"mobile"+separator+"pwas"+separator+target+separator+"manifest.json"));
    // get charset utf8
    var charset = StandardCharsets.UTF_8;
    // get text as js string
    var content = "" + new String(Files.readAllBytes(filePath), charset);
    // parse string as JSON Object
    var jsonManifest = JSON.parse(content);
    
    // override existing values with new ones if they are not empty
    pwaName != "" ? jsonManifest["name"] = pwaName : null;
    pwaShortName != "" ? jsonManifest["short_name"] = pwaShortName : null;
    pwaBackgroundColor != "" ? jsonManifest["background_color"] = pwaBackgroundColor : null;
    pwaThemeColor != "" ? jsonManifest["theme_color"] = pwaThemeColor : null;
    target != "" ? jsonManifest["start_url"] = "./index.html"+ (queryParameters != "" ? "?" + queryParameters : ""): "";
    jsonManifest["scope"] = "/convertigo/projects/" + projectName + "/DisplayObjects/mobile"+ ((target != undefined && target != "") ? "/pwas/"+target:"") + "/" 
    try {
    	var others = JSON.parse(additionalParametersJSONObjectString);
    	for (var i in others) {
    		if(["name", "short_name", "start_url", "display", "icons", "background_color", "theme_color"].indexOf(i) == -1){
    			others[i] != "" ? jsonManifest[i] = others[i] : null;
    		}
    		else{
    			log.warning("additionalParametersJSONObjectString, key " + i + " is forbidden");
    		}
    		
    	}
    }
    catch(e){
    	log.warning("catched error"+ JSON.stringify(e));
    }
    // override content value with our new ones
    content = new String(""+JSON.stringify(jsonManifest));
    // rewrite file
    Files.write(filePath, content.getBytes(charset));'
↓Sequence_JSCreateSymlink [steps.SimpleStep-1603295752447]: 
  expression: |
    '//todo
    try {
    	if(target != undefined && target != ""){
    		var mobilePath = projectPath + separator+"DisplayObjects"+separator+"mobile"+separator;
    		var cmdSymLink = isWindows ?
    				"cmd /C mklink /D "+mobilePath +"pwas"+separator+target+separator+"assets " + mobilePath + "assets && mklink /D "+mobilePath +"pwas"+separator+target+separator+"build " + mobilePath + "build":
    				"bash -c ln -s " + mobilePath + "assets " + mobilePath+"pwas"+separator+target+separator+"assets && ln -s " + mobilePath + "build " + mobilePath+"pwas"+separator+target+separator+"build";	
    		log.warn("Sequence_JSCreateSymlink :"+cmdSymLink)
    	}
    }
    catch(e){
    	
    }'
  output: true
↓jIf1 [steps.IfStep-1603297464493]: 
  condition: target != undefined && target != ""
  ↓Process_execute [steps.ProcessExecStep-1603297502894]: 
    commandLine: cmdSymLink
    output: true
↓Sequence_JSFindNgswconfigPath [steps.SimpleStep-1603366228196]: 
  expression: |
    '//imports
    var Paths = use("java.nio.file.Paths");
    
    var tplProjectName = com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getOriginalProjectByName(projectName).mobileApplication.getApplicationComponent().getTplProjectName();
    var tplProjectPath = com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getOriginalProjectByName(tplProjectName).getDirPath();
    var tplNgwwConfigJsonPath = tplProjectPath + separator + "ionicTpl" + separator + "src" + separator + "ngsw-config.json"
    log.warn("founded tpl project name: " +tplProjectName);
    log.warn("founded tpl project path: " +tplProjectPath);
    log.warn("supposed ngsw-config path is : " +tplNgwwConfigJsonPath);
    
    // get ngsw-config file in relative path
    var sourceFile = Paths.get(projectPath);
    var targetFile = Paths.get(tplNgwwConfigJsonPath);
    var tplNgwwConfigJsonRelativePath = sourceFile.relativize(targetFile); 
    log.warn("ngsw-config relative path is: " +tplNgwwConfigJsonPath);
    /*
    //C:\dev\convertigo_workspaces\workspace1\mobilebuilder_tpl_test\ionicTpl\src\ngsw-config.json
    
    //node_modules/.bin/ngsw-config ../DisplayObjects/mobile src/ngsw-config.json /convertigo/projects/{{c8o_project}}/DisplayObjects/mobile/
    */
    
    
    var npmCmd = isWindows ?
    			"cmd /C cd "+projectPath+" && "+file + separator + "ngsw-config .\\DisplayObjects\\mobile\\pwas\\"+target+ " "+ tplNgwwConfigJsonRelativePath+ " /convertigo/projects/" + projectName +"/DisplayObjects/mobile/pwas/"+target+"/"  :
    			["bash","-c","PATH=" + file + ":$PATH cd "+projectPath+" && ngsw-config ./DisplayObjects/mobile/pwas/"+target+ " "+ tplNgwwConfigJsonRelativePath+ " /convertigo/projects/" + projectName +"/DisplayObjects/mobile/pwas/"+target+"/"];
    log.warn("command npm for generate ngsw.json: "+npmCmd);
    
    '
↓IfFileExistsThenElse2 [steps.IfFileExistThenElseStep-1603366735360]: 
  condition: tplNgwwConfigJsonPath
  ↓jThen [steps.ThenStep-1603366736774]: 
    ↓Process_execute [steps.ProcessExecStep-1603370069530]: 
      commandLine: npmCmd
      output: true
  ↓jElse [steps.ElseStep-1603366736776]: 
↓image [variables.RequestableVariable-1601370133677]: 
  isFileUpload: true
↓projectName [variables.RequestableVariable-1601370157638]: 
↓target [variables.RequestableVariable-1601738892370]: 
  value: 
↓pwaName [variables.RequestableVariable-1603208508991]: 
  value: 
↓pwaShortName [variables.RequestableVariable-1603208523781]: 
  value: 
↓pwaBackgroundColor [variables.RequestableVariable-1603208553019]: 
  value: 
↓pwaThemeColor [variables.RequestableVariable-1603208555904]: 
  value: 
↓additionalParametersJSONObjectString [variables.RequestableVariable-1603213609751]: 
  value: '{}'
↓queryParameters [variables.RequestableVariable-1603213820516]: 
  value: 